# JMH version: 1.21
# VM version: JDK 12.0.1, OpenJDK 64-Bit Server VM, 12.0.1+12
# VM invoker: /usr/java/jdk-12.0.1/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fcc.raster.RasterBenchmark.bm_raster
# Parameters: (n_clusters = 10, precision = 3.5)

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.389 ms/op
# Warmup Iteration   2: 0.357 ms/op
# Warmup Iteration   3: 0.350 ms/op
# Warmup Iteration   4: 0.357 ms/op
# Warmup Iteration   5: 0.369 ms/op
Iteration   1: 0.397 ms/op
Iteration   2: 0.399 ms/op
Iteration   3: 0.407 ms/op
Iteration   4: 0.388 ms/op
Iteration   5: 0.419 ms/op


Result "fcc.raster.RasterBenchmark.bm_raster":
  0.402 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.388, 0.402, 0.419), stdev = 0.011
  CI (99.9%): [0.358, 0.446] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12.0.1, OpenJDK 64-Bit Server VM, 12.0.1+12
# VM invoker: /usr/java/jdk-12.0.1/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fcc.raster.RasterBenchmark.bm_raster
# Parameters: (n_clusters = 10, precision = 4)

# Run progress: 16.67% complete, ETA 00:04:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.424 ms/op
# Warmup Iteration   2: 0.408 ms/op
# Warmup Iteration   3: 0.398 ms/op
# Warmup Iteration   4: 0.398 ms/op
# Warmup Iteration   5: 0.422 ms/op
Iteration   1: 0.696 ms/op
Iteration   2: 0.464 ms/op
Iteration   3: 0.453 ms/op
Iteration   4: 0.447 ms/op
Iteration   5: 0.469 ms/op


Result "fcc.raster.RasterBenchmark.bm_raster":
  0.506 ±(99.9%) 0.411 ms/op [Average]
  (min, avg, max) = (0.447, 0.506, 0.696), stdev = 0.107
  CI (99.9%): [0.095, 0.917] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12.0.1, OpenJDK 64-Bit Server VM, 12.0.1+12
# VM invoker: /usr/java/jdk-12.0.1/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fcc.raster.RasterBenchmark.bm_raster
# Parameters: (n_clusters = 100, precision = 3.5)

# Run progress: 33.33% complete, ETA 00:03:22
# Fork: 1 of 1
# Warmup Iteration   1: 4.972 ms/op
# Warmup Iteration   2: 4.108 ms/op
# Warmup Iteration   3: 4.167 ms/op
# Warmup Iteration   4: 4.149 ms/op
# Warmup Iteration   5: 4.163 ms/op
Iteration   1: 4.463 ms/op
Iteration   2: 5.241 ms/op
Iteration   3: 5.248 ms/op
Iteration   4: 5.171 ms/op
Iteration   5: 5.195 ms/op


Result "fcc.raster.RasterBenchmark.bm_raster":
  5.064 ±(99.9%) 1.299 ms/op [Average]
  (min, avg, max) = (4.463, 5.064, 5.248), stdev = 0.337
  CI (99.9%): [3.764, 6.363] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12.0.1, OpenJDK 64-Bit Server VM, 12.0.1+12
# VM invoker: /usr/java/jdk-12.0.1/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fcc.raster.RasterBenchmark.bm_raster
# Parameters: (n_clusters = 100, precision = 4)

# Run progress: 50.00% complete, ETA 00:02:31
# Fork: 1 of 1
# Warmup Iteration   1: 5.876 ms/op
# Warmup Iteration   2: 5.787 ms/op
# Warmup Iteration   3: 5.421 ms/op
# Warmup Iteration   4: 5.901 ms/op
# Warmup Iteration   5: 5.488 ms/op
Iteration   1: 5.833 ms/op
Iteration   2: 5.725 ms/op
Iteration   3: 7.512 ms/op
Iteration   4: 6.254 ms/op
Iteration   5: 6.269 ms/op


Result "fcc.raster.RasterBenchmark.bm_raster":
  6.319 ±(99.9%) 2.735 ms/op [Average]
  (min, avg, max) = (5.725, 6.319, 7.512), stdev = 0.710
  CI (99.9%): [3.584, 9.054] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12.0.1, OpenJDK 64-Bit Server VM, 12.0.1+12
# VM invoker: /usr/java/jdk-12.0.1/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fcc.raster.RasterBenchmark.bm_raster
# Parameters: (n_clusters = 1000, precision = 3.5)

# Run progress: 66.67% complete, ETA 00:01:41
# Fork: 1 of 1
# Warmup Iteration   1: 64.548 ms/op
# Warmup Iteration   2: 60.023 ms/op
# Warmup Iteration   3: 58.314 ms/op
# Warmup Iteration   4: 58.438 ms/op
# Warmup Iteration   5: 59.160 ms/op
Iteration   1: 58.507 ms/op
Iteration   2: 67.492 ms/op
Iteration   3: 65.961 ms/op
Iteration   4: 66.542 ms/op
Iteration   5: 65.549 ms/op


Result "fcc.raster.RasterBenchmark.bm_raster":
  64.810 ±(99.9%) 13.856 ms/op [Average]
  (min, avg, max) = (58.507, 64.810, 67.492), stdev = 3.598
  CI (99.9%): [50.955, 78.666] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12.0.1, OpenJDK 64-Bit Server VM, 12.0.1+12
# VM invoker: /usr/java/jdk-12.0.1/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fcc.raster.RasterBenchmark.bm_raster
# Parameters: (n_clusters = 1000, precision = 4)

# Run progress: 83.33% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 143.833 ms/op
# Warmup Iteration   2: 117.090 ms/op
# Warmup Iteration   3: 123.692 ms/op
# Warmup Iteration   4: 129.933 ms/op
# Warmup Iteration   5: 135.266 ms/op
Iteration   1: 136.803 ms/op
Iteration   2: 145.037 ms/op
Iteration   3: 134.584 ms/op
Iteration   4: 134.162 ms/op
Iteration   5: 149.834 ms/op


Result "fcc.raster.RasterBenchmark.bm_raster":
  140.084 ±(99.9%) 26.932 ms/op [Average]
  (min, avg, max) = (134.162, 140.084, 149.834), stdev = 6.994
  CI (99.9%): [113.151, 167.016] (assumes normal distribution)


# Run complete. Total time: 00:05:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                  (n_clusters)  (precision)  Mode  Cnt    Score    Error  Units
RasterBenchmark.bm_raster            10          3.5  avgt    5    0.402 ±  0.044  ms/op
RasterBenchmark.bm_raster            10            4  avgt    5    0.506 ±  0.411  ms/op
RasterBenchmark.bm_raster           100          3.5  avgt    5    5.064 ±  1.299  ms/op
RasterBenchmark.bm_raster           100            4  avgt    5    6.319 ±  2.735  ms/op
RasterBenchmark.bm_raster          1000          3.5  avgt    5   64.810 ± 13.856  ms/op
RasterBenchmark.bm_raster          1000            4  avgt    5  140.084 ± 26.932  ms/op
