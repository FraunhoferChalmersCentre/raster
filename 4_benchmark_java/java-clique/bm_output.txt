# JMH version: 1.21
# VM version: JDK 12.0.1, OpenJDK 64-Bit Server VM, 12.0.1+12
# VM invoker: /usr/java/jdk-12.0.1/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fcc.clique.CliqueBenchmark.bm
# Parameters: (n_clusters = 10)

# Run progress: 0.00% complete, ETA 00:02:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 s/op
# Warmup Iteration   2: 0.012 s/op
# Warmup Iteration   3: 0.012 s/op
# Warmup Iteration   4: 0.012 s/op
# Warmup Iteration   5: 0.012 s/op
Iteration   1: 0.013 s/op
Iteration   2: 0.013 s/op
Iteration   3: 0.012 s/op
Iteration   4: 0.012 s/op
Iteration   5: 0.013 s/op


Result "fcc.clique.CliqueBenchmark.bm":
  0.012 ±(99.9%) 0.001 s/op [Average]
  (min, avg, max) = (0.012, 0.012, 0.013), stdev = 0.001
  CI (99.9%): [0.012, 0.013] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12.0.1, OpenJDK 64-Bit Server VM, 12.0.1+12
# VM invoker: /usr/java/jdk-12.0.1/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fcc.clique.CliqueBenchmark.bm
# Parameters: (n_clusters = 100)

# Run progress: 33.33% complete, ETA 00:01:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.759 s/op
# Warmup Iteration   2: 1.490 s/op
# Warmup Iteration   3: 1.480 s/op
# Warmup Iteration   4: 1.529 s/op
# Warmup Iteration   5: 1.531 s/op
Iteration   1: 1.586 s/op
Iteration   2: 1.534 s/op
Iteration   3: 1.446 s/op
Iteration   4: 1.570 s/op
Iteration   5: 1.354 s/op


Result "fcc.clique.CliqueBenchmark.bm":
  1.498 ±(99.9%) 0.373 s/op [Average]
  (min, avg, max) = (1.354, 1.498, 1.586), stdev = 0.097
  CI (99.9%): [1.125, 1.871] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 12.0.1, OpenJDK 64-Bit Server VM, 12.0.1+12
# VM invoker: /usr/java/jdk-12.0.1/bin/java
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 1 ms each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: fcc.clique.CliqueBenchmark.bm
# Parameters: (n_clusters = 1000)

# Run progress: 66.67% complete, ETA 00:00:55
# Fork: 1 of 1
# Warmup Iteration   1: 174.979 s/op
# Warmup Iteration   2: 199.891 s/op
# Warmup Iteration   3: 201.977 s/op
# Warmup Iteration   4: 210.628 s/op
# Warmup Iteration   5: 212.722 s/op
Iteration   1: 202.306 s/op
Iteration   2: 202.279 s/op
Iteration   3: 200.846 s/op
Iteration   4: 201.091 s/op
Iteration   5: 204.415 s/op


Result "fcc.clique.CliqueBenchmark.bm":
  202.187 ±(99.9%) 5.442 s/op [Average]
  (min, avg, max) = (200.846, 202.187, 204.415), stdev = 1.413
  CI (99.9%): [196.746, 207.629] (assumes normal distribution)


# Run complete. Total time: 00:35:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark           (n_clusters)  Mode  Cnt    Score   Error  Units
CliqueBenchmark.bm            10  avgt    5    0.012 ± 0.001   s/op
CliqueBenchmark.bm           100  avgt    5    1.498 ± 0.373   s/op
CliqueBenchmark.bm          1000  avgt    5  202.187 ± 5.442   s/op
